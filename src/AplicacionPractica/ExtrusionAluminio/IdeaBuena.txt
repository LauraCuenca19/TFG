using System;
using System.Collections.Generic;

// Clase Tocho para representar el material inicial
class Tocho
{
    public double Longitud { get; private set; }
    public string Aleacion { get; private set; }
    public double Temperatura { get; set; }

    public Tocho(string aleacion)
    {
        Random rand = new Random();
        Longitud = Math.Round(1.5 + rand.NextDouble() * 1.5, 2);
        Aleacion = aleacion;
        Temperatura = 25; // Temperatura ambiente
    }
}

// Interfaz para las máquinas
interface IMaquina
{
    void RealizarOperacion(Tocho tocho, Perfil perfil);
}

// Clase base Maquina que implementa IMaquina
abstract class Maquina : IMaquina
{
    public int TiempoProceso { get; protected set; } // Tiempo en segundos de cada operación

    public abstract void RealizarOperacion(Tocho tocho, Perfil perfil);
}

// Clase Horno que hereda de Maquina
class Horno : Maquina
{
    public override void RealizarOperacion(Tocho tocho, Perfil perfil)
    {
        // Simulación de tiempo de proceso realista
        TiempoProceso = 180; // 3 minutos -> 180 segundos

        // Simular operación de calentamiento
        Console.WriteLine($"Calentando el tocho de aleación {tocho.Aleacion} en el horno...");
        // Lógica de calentamiento
        perfil.TiempoProcesoTotal += TiempoProceso;

        // Ajuste de tiempo según la temperatura del horno
        if (perfil.TemperaturaHorno < 350)
        {
            perfil.TiempoProcesoTotal += 30; // Suma 30 segundos adicionales
        }
    }
}

// Clase Prensa que hereda de Maquina
class Prensa : Maquina
{
    public override void RealizarOperacion(Tocho tocho, Perfil perfil)
    {
        // Simulación de tiempo de proceso realista
        TiempoProceso = 300; // 5 minutos -> 300 segundos

        // Simular operación de extrusión
        Console.WriteLine("Extruyendo el perfil en la prensa...");
        // Lógica de extrusión
        perfil.TiempoProcesoTotal += TiempoProceso;

        // Ajuste de tiempo según el ritmo de extrusión
        if (perfil.RitmoExtrusionPrensa == "Lento")
        {
            perfil.TiempoProcesoTotal += 60; // Suma 60 segundos adicionales
        }
    }
}

// Clase Enfriador que hereda de Maquina
class Enfriador : Maquina
{
    public override void RealizarOperacion(Tocho tocho, Perfil perfil)
    {
        // Simulación de tiempo de proceso realista
        TiempoProceso = 240; // 4 minutos -> 240 segundos

        // Simular operación de enfriamiento
        Console.WriteLine("Enfriando el perfil...");
        // Lógica de enfriamiento
        perfil.TiempoProcesoTotal += TiempoProceso;

        // Ajuste de tiempo según el tiempo de enfriamiento
        if (perfil.TiempoEnfriamiento < 240)
        {
            perfil.TiempoProcesoTotal += 30; // Suma 30 segundos adicionales
        }
    }
}

// Clase Perfil para representar un perfil generado
class Perfil
{
    public string Nombre { get; }
    public int TiempoProcesoTotal { get; set; } // Tiempo total de proceso en segundos
    public string FormaMatriz { get; }
    public string Aleacion { get; }
    public int PuntosCalidad { get; set; } // Puntuación de calidad del perfil
    public int TemperaturaHorno { get; }
    public string NivelFuerzaPrensa { get; }
    public string RitmoExtrusionPrensa { get; }
    public int TiempoEnfriamiento { get; }

    public Perfil(string nombre, string formaMatriz, string aleacion, int temperaturaHorno, string nivelFuerzaPrensa, string ritmoExtrusionPrensa, int tiempoEnfriamiento)
    {
        Nombre = nombre;
        FormaMatriz = formaMatriz;
        Aleacion = aleacion;
        TemperaturaHorno = temperaturaHorno;
        NivelFuerzaPrensa = nivelFuerzaPrensa;
        RitmoExtrusionPrensa = ritmoExtrusionPrensa;
        TiempoEnfriamiento = tiempoEnfriamiento;
        TiempoProcesoTotal = 0; // Inicializar tiempo total de proceso
        PuntosCalidad = 0; // Inicializar puntos de calidad
    }

    public void CalcularPuntosCalidad()
    {
        PuntosCalidad = 0; // Reiniciar puntuación

        // Evaluación basada en la aleación y los parámetros de proceso
        if (Aleacion == "6061")
        {
            // Rangos de temperatura óptima
            if (TemperaturaHorno >= 450 && TemperaturaHorno <= 500)
            {
                PuntosCalidad += 20;
            }
            
            // Nivel de fuerza
            if (NivelFuerzaPrensa == "Medio" || NivelFuerzaPrensa == "Alto")
            {
                PuntosCalidad += 15;
            }
            
            // Ritmo de extrusión
            if (RitmoExtrusionPrensa == "Medio")
            {
                PuntosCalidad += 15;
            }

            // Rango de tiempo de enfriamiento recomendado
            if (TiempoEnfriamiento >= 180 && TiempoEnfriamiento <= 240)
            {
                PuntosCalidad += 10;
            }
        }
        else if (Aleacion == "7075")
        {
            // Rangos de temperatura óptima
            if (TemperaturaHorno >= 420 && TemperaturaHorno <= 470)
            {
                PuntosCalidad += 20;
            }
            
            // Nivel de fuerza
            if (NivelFuerzaPrensa == "Alto")
            {
                PuntosCalidad += 15;
            }
            
            // Ritmo de extrusión
            if (RitmoExtrusionPrensa == "Lento" || RitmoExtrusionPrensa == "Medio")
            {
                PuntosCalidad += 15;
            }

            // Rango de tiempo de enfriamiento recomendado
            if (TiempoEnfriamiento >= 240 && TiempoEnfriamiento <= 300)
            {
                PuntosCalidad += 10;
            }
        }
        else if (Aleacion == "2024")
        {
            // Rangos de temperatura óptima
            if (TemperaturaHorno >= 400 && TemperaturaHorno <= 450)
            {
                PuntosCalidad += 20;
            }
            
            // Nivel de fuerza
            if (NivelFuerzaPrensa == "Medio")
            {
                PuntosCalidad += 15;
            }
            
            // Ritmo de extrusión
            if (RitmoExtrusionPrensa == "Medio" || RitmoExtrusionPrensa == "Rápido")
            {
                PuntosCalidad += 15;
            }

            // Rango de tiempo de enfriamiento recomendado
            if (TiempoEnfriamiento >= 300 && TiempoEnfriamiento <= 360)
            {
                PuntosCalidad += 10;
            }
        }
    }
}

// Clase principal del programa
class SistemaAPS
{
    private List<Maquina> ColaMaquinas { get; }
    private List<Perfil> PerfilesCreados { get; }

    public SistemaAPS()
    {
        // Inicializar la cola de máquinas en el orden de operación
        ColaMaquinas = new List<Maquina>
        {
            new Horno(),
            new Prensa(),
            new Enfriador()
        };

        // Inicializar lista de perfiles creados
        PerfilesCreados = new List<Perfil>();
    }

    // Función para solicitar al usuario que ingrese un nombre para el perfil
    private string SolicitarNombrePerfil()
    {
        Console.Write("Ingrese un nombre para el perfil: ");
        return Console.ReadLine();
    }

    // Función para solicitar al usuario que elija la forma de la matriz
    private string SeleccionarFormaMatriz()
    {
        Console.WriteLine("\nSeleccione la forma de la matriz:");
        Console.WriteLine("1. Circular");
        Console.WriteLine("2. Rectangular");
        Console.WriteLine("3. Personalizada");

        Console.Write("Ingrese la opción deseada (1/2/3): ");
        int opcion = Convert.ToInt32(Console.ReadLine());

        switch (opcion)
        {
            case 1:
                return "Circular";
            case 2:
                return "Rectangular";
            case 3:
                return "Personalizada";
            default:
                Console.WriteLine("Opción no válida. Seleccionando forma circular por defecto.");
                return "Circular";
        }
    }

    // Método para consultar la guía con los requisitos óptimos para cada aleación
    private void ConsultarGuiaManual(string aleacion)
    {
        // Proporcionar recomendaciones basadas en la aleación seleccionada
        switch (aleacion)
        {
            case "6061":
                Console.WriteLine("Recomendaciones para aleación 6061:");
                Console.WriteLine("Temperatura óptima: 450-500°C");
                Console.WriteLine("Nivel de fuerza: Medio a Alto");
                Console.WriteLine("Ritmo de extrusión: Medio");
                Console.WriteLine("Tiempo de enfriamiento: 3-4 minutos");
                break;
            case "7075":
                Console.WriteLine("Recomendaciones para aleación 7075:");
                Console.WriteLine("Temperatura óptima: 420-470°C");
                Console.WriteLine("Nivel de fuerza: Alto");
                Console.WriteLine("Ritmo de extrusión: Lento a Medio");
                Console.WriteLine("Tiempo de enfriamiento: 4-5 minutos");
                break;
            case "2024":
                Console.WriteLine("Recomendaciones para aleación 2024:");
                Console.WriteLine("Temperatura óptima: 400-450°C");
                Console.WriteLine("Nivel de fuerza: Medio");
                Console.WriteLine("Ritmo de extrusión: Medio a Rápido");
                Console.WriteLine("Tiempo de enfriamiento: 5-6 minutos");
                break;
            default:
                Console.WriteLine("No se encontraron recomendaciones para esta aleación.");
                break;
        }
    }

    // Método para simular una prueba de creación de perfil
    public void SimularPruebaCreacionPerfil()
    {
        Console.WriteLine("\nCreación de un nuevo perfil:");

        // Solicitar nombre para el perfil
        string nombrePerfil = SolicitarNombrePerfil();

        // Solicitar aleación al usuario
        Console.Write("Ingrese la aleación del perfil (6061 / 7075 / 2024): ");
        string aleacionSeleccionada = Console.ReadLine();

        // Crear un tocho con la aleación seleccionada
        Tocho tocho = new Tocho(aleacionSeleccionada);

        // Mostrar guía con los requisitos óptimos para la aleación seleccionada
        ConsultarGuiaManual(aleacionSeleccionada);

        // Solicitar forma de la matriz al usuario
        string formaMatriz = SeleccionarFormaMatriz();
        Console.WriteLine($"Forma de la matriz seleccionada: {formaMatriz}");

        // Solicitar datos de proceso al usuario
        Console.WriteLine("\nIngrese los datos de proceso:");
        Console.Write("Temperatura del horno (en °C): ");
        int temperaturaHorno = Convert.ToInt32(Console.ReadLine());
        Console.Write("Nivel de fuerza de la prensa (Bajo/Medio/Alto): ");
        string nivelFuerzaPrensa = Console.ReadLine();
        Console.Write("Ritmo de extrusión de la prensa (Lento/Medio/Rápido): ");
        string ritmoExtrusionPrensa = Console.ReadLine();
        Console.Write("Tiempo de enfriamiento (en segundos): ");
        int tiempoEnfriamiento = Convert.ToInt32(Console.ReadLine());

        // Crear un perfil con los datos ingresados
        Perfil perfil = new Perfil(nombrePerfil, formaMatriz, aleacionSeleccionada, temperaturaHorno, nivelFuerzaPrensa, ritmoExtrusionPrensa, tiempoEnfriamiento);

        // Procesar el tocho en cada máquina en la cola
        foreach (var maquina in ColaMaquinas)
        {
            maquina.RealizarOperacion(tocho, perfil);
        }

        // Calcular los puntos de calidad del perfil
        perfil.CalcularPuntosCalidad();

        // Mostrar resultados del perfil creado
        Console.WriteLine($"\nPerfil creado: {perfil.Nombre}");
        Console.WriteLine($"Forma de la matriz: {perfil.FormaMatriz}");
        Console.WriteLine($"Tiempo total de proceso: {perfil.TiempoProcesoTotal} segundos");
        Console.WriteLine($"Puntos de calidad: {perfil.PuntosCalidad}");

        // Almacenar perfil creado en la lista de perfiles
        PerfilesCreados.Add(perfil);
    }

    // Método para mostrar la lista de perfiles creados
    private void MostrarListaPerfiles()
    {
        Console.WriteLine("\nLista de perfiles creados:");

        if (PerfilesCreados.Count > 0)
        {
            foreach (var perfil in PerfilesCreados)
            {
                Console.WriteLine($"- {perfil.Nombre}: {perfil.Aleacion}, {perfil.FormaMatriz}, Tiempo: {perfil.TiempoProcesoTotal} segundos, Calidad: {perfil.PuntosCalidad}");
            }
        }
        else
        {
            Console.WriteLine("No hay perfiles almacenados en esta simulación.");
        }
    }

    // Método principal para iniciar la simulación
    public void IniciarSimulacion()
    {
        while (true)
        {
            SimularPruebaCreacionPerfil(); // Simular una prueba de creación de perfil

            // Opciones al finalizar la prueba
            while (true)
            {
                Console.WriteLine("\nOpciones:");
                Console.WriteLine("1. Mostrar lista de perfiles creados");
                Console.WriteLine("2. Continuar con otra prueba");
                Console.WriteLine("3. Salir del programa");
                Console.Write("Seleccione una opción (1/2/3): ");
                string opcion = Console.ReadLine();

                switch (opcion)
                {
                    case "1":
                        // Mostrar lista de perfiles creados
                        MostrarListaPerfiles();
                        break;
                    case "2":
                        // Continuar con otra prueba
                        Console.WriteLine("\nPreparando para iniciar otra prueba...");
                        Console.WriteLine("-------------------------------------");
                        break; // Salir del switch y continuar con la simulación
                    case "3":
                        // Salir del programa
                        Console.WriteLine("\nPrograma finalizado.");
                        Environment.Exit(0);
                        break;
                    default:
                        Console.WriteLine("\nOpción no válida. Intente nuevamente.");
                        break;
                }

                // Si se selecciona continuar con otra prueba, salir del bucle interno
                if (opcion == "2")
                {
                    break;
                }
            }
        }
    }

    // Método principal para iniciar la aplicación
    static void Main(string[] args)
    {
        SistemaAPS sistema = new SistemaAPS();
        sistema.IniciarSimulacion();
    }
}
