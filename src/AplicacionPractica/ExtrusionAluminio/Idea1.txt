using System;
using System.Collections.Generic;

namespace APS_ExtrusionAluminio
{
    class Program
    {
        static void Main(string[] args)
        {
            // Creación de un sistema de planificación de producción
            SistemaAPS sistema = new SistemaAPS();

            // Crear y agregar máquinas al sistema
            sistema.AgregarMaquina(new Horno("Horno de Calentamiento", 500));
            sistema.AgregarMaquina(new Prensa("Prensa de Extrusión", 150));
            sistema.AgregarMaquina(new Enfriador("Enfriador de Perfiles", 100));
            sistema.AgregarMaquina(new Cortadora("Cortadora Automática"));

            // Crear perfiles
            Perfil perfilA = new Perfil("Perfil A", 100, 4);
            Perfil perfilB = new Perfil("Perfil B", 50, 3);
            Perfil perfilC = new Perfil("Perfil C", 200, 5);
            Perfil perfilD = new Perfil("Perfil D", 150, 6);

            // Añadir perfiles al sistema
            sistema.AgregarPerfil(perfilA);
            sistema.AgregarPerfil(perfilB);
            sistema.AgregarPerfil(perfilC);
            sistema.AgregarPerfil(perfilD);

            // Simular producción de perfiles
            sistema.PlanificarProduccion();

            Console.ReadLine();
        }
    }

    // Clase abstracta para representar una máquina
    abstract class Maquina
    {
        public string Nombre { get; protected set; }
        public int Capacidad { get; protected set; }

        public Maquina(string nombre, int capacidad)
        {
            Nombre = nombre;
            Capacidad = capacidad;
        }

        public abstract void RealizarOperacion(Tocho tocho, string formaPerfil);
    }

    // Clase concreta para representar una máquina de horno
    class Horno : Maquina
    {
        public Horno(string nombre, int capacidad) : base(nombre, capacidad)
        {
        }

        public override void RealizarOperacion(Tocho tocho, string formaPerfil)
        {
            Console.WriteLine($"Tocho calentado en {Nombre} a {tocho.Temperatura}°C");
        }
    }

    // Clase concreta para representar una máquina de prensa
    class Prensa : Maquina
    {
        public Prensa(string nombre, int capacidad) : base(nombre, capacidad)
        {
        }

        public override void RealizarOperacion(Tocho tocho, string formaPerfil)
        {
            Console.WriteLine($"Tocho extruido en {Nombre}");
        }
    }

    // Clase concreta para representar una máquina de enfriador
    class Enfriador : Maquina
    {
        public Enfriador(string nombre, int capacidad) : base(nombre, capacidad)
        {
        }

        public override void RealizarOperacion(Tocho tocho, string formaPerfil)
        {
            Console.WriteLine($"Perfil enfriado en {Nombre}");
        }
    }

    // Clase concreta para representar una máquina de cortadora
    class Cortadora : Maquina
    {
        public Cortadora(string nombre) : base(nombre, 0)
        {
            // La cortadora no tiene capacidad, es solo para la operación de corte
        }

        public override void RealizarOperacion(Tocho tocho, string formaPerfil)
        {
            Console.WriteLine($"Perfil cortado en {Nombre}");
        }
    }

    // Clase para representar un perfil como objeto
    class Perfil
    {
        public string Nombre { get; }
        public int TamanoLote { get; }
        public int TiempoProceso { get; }

        public Perfil(string nombre, int tamanoLote, int tiempoProceso)
        {
            Nombre = nombre;
            TamanoLote = tamanoLote;
            TiempoProceso = tiempoProceso;
        }
    }

    // Clase para representar un tocho como objeto
    class Tocho
    {
        public double Longitud { get; private set; }
        public string Aleacion { get; private set; }
        public double Temperatura { get; set; }

        public Tocho()
        {
            Random rand = new Random();
            Longitud = Math.Round(1.5 + rand.NextDouble() * 1.5, 2);
            string[] aleaciones = { "6061", "7075", "2024" };
            Aleacion = aleaciones[rand.Next(aleaciones.Length)];
            Temperatura = 25; // Temperatura ambiente
        }
    }

    // Clase para representar un sistema de planificación de producción
    class SistemaAPS
    {
        private Queue<Maquina> colaMaquinas;
        private List<Perfil> perfiles;

        public SistemaAPS()
        {
            colaMaquinas = new Queue<Maquina>();
            perfiles = new List<Perfil>();
        }

        public void AgregarMaquina(Maquina maquina)
        {
            colaMaquinas.Enqueue(maquina);
        }

        public void AgregarPerfil(Perfil perfil)
        {
            perfiles.Add(perfil);
        }

        public void PlanificarProduccion()
        {
            Random rand = new Random();

            foreach (var perfil in perfiles)
            {
                // Crear un tocho aleatorio
                Tocho tocho = new Tocho();

                // Mostrar información del tocho
                Console.WriteLine($"Tocho creado - Longitud: {tocho.Longitud} m, Aleación: {tocho.Aleacion}");

                // Consultar la guía manual para la aleación
                ConsultarGuiaManual(tocho.Aleacion);

                // Pedir forma del perfil al usuario
                string formaPerfil = SeleccionarFormaPerfil();

                // Ejecutar las operaciones en la cola de máquinas
                while (colaMaquinas.Count > 0)
                {
                    Maquina maquina = colaMaquinas.Dequeue();
                    maquina.RealizarOperacion(tocho, formaPerfil);
                }

                // Mostrar mensaje de finalización del perfil
                Console.WriteLine($"Perfil {perfil.Nombre} completado.");

                // Simular tiempo de espera entre perfiles
                System.Threading.Thread.Sleep(rand.Next(1000, 3000));
            }
        }

        private void ConsultarGuiaManual(string aleacion)
        {
            // Proporcionar recomendaciones basadas en la aleación seleccionada
            if (aleacion == "6061")
            {
                Console.WriteLine("Recomendaciones para aleación 6061:");
                Console.WriteLine("Temperatura óptima: 450-500°C");
                Console.WriteLine("Nivel de fuerza: Medio a Alto");
                Console.WriteLine("Ritmo de extrusión: Medio");
            }
            else if (aleacion == "7075")
            {
                Console.WriteLine("Recomendaciones para aleación 7075:");
                Console.WriteLine("Temperatura óptima: 420-470°C");
                Console.WriteLine("Nivel de fuerza: Alto");
                Console.WriteLine("Ritmo de extrusión: Lento a Medio");
            }
            else if (aleacion == "2024")
            {
                Console.WriteLine("Recomendaciones para aleación 2024:");
                Console.WriteLine("Temperatura óptima: 400-450°C");
                Console.WriteLine("Nivel de fuerza: Medio");
                Console.WriteLine("Ritmo de extrusión: Medio a Rápido");
            }
        }

        private string SeleccionarFormaPerfil()
        {
            Console.WriteLine("Seleccione la forma de la matriz (1: Circular, 2: Rectangular, 3: Personalizada): ");
            int opcion = Convert.ToInt32(Console.ReadLine());

            switch (opcion)
            {
                case 1:
                    return "Circular";
                case 2:
                    return "Rectangular";
                case 3:
                    return "Personalizada";
                default:
                    Console.WriteLine("Opción no válida. Seleccionando forma circular por defecto.");
                    return "Circular";
            }
        }
    }
}
